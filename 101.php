<?php
/*---Входные данные---*/
$n = 5;

////////////////////////////////////////////////////////////////////////////////
/*------------------------------------Вариант #1------------------------------*/
////////////////////////////////////////////////////////////////////////////////

/*---Класс---*/
class GEN{
    //Для того, чтобы не запутаться, я решил все разделить на более мелкие детали.
    //Давайте проведу вас по этим дебрям от самого начала.
    
    function main($n){
        //Сначала мы должны привести данные в тот вид, в котором с ним работает весь класс
        for($i=0;$i<$n-1;$i++){
            $text .= '0';
        }
        $num_now = $text .= '1';
        $base = ['1'];
            
            
            while(1){
                //выполним основную функцию, которая выдаст нам следующее число.
                $num_next = $this->logic($num_now,$base,$n);
                
                //если данное число изначально меньше предпологаемого,
                //значит отделим его от нулей и запишем в базу
                if($num_now < $num_next){
                        
                    $count = stripos($num_next,'1');
                    
                    $text = '';
                    for($j=$count;$j<$n;$j++){
                        $text .= $num_next[$j];
                    }
                    
                    //записали в нашу базу новое число.    
                    array_push($base, $text);
                        
                    $num_now = $num_next;
                }  
                
                //если новое число меньше того, что подали на вход, это означает, что
                //сдвигать уже некуда и достигнут край в количестве нулей.
                //Значит пора остановиться.
                if(end($base) < $num_now){
                    array_pop($base);
                    break;
                } 
            }    
            
        return $base;
        
        }
        
    function logic($num_now,$base,$n){
        //Мы полним функцию after, которая нужна только для дополнительного ур. абстрации(чтобы я сам не запутался)
        //если функции after на вход подать 100 в ответ придет 101, в свою очередь подав 101 в 
        //овет придет не 1000, а 100.
        //как вы уже поняли, не учитывается переход знака, по этой причине мы делаем его ниже.
        $return = $this->after($num_now,$base,$n);
        
            if($return == null){
                //находим первую попавшуюся единицу
                $count = stripos($num_now,'1');
                
                //генерируем сдвиг числа. Было 101, станет 1000
                for($i=0;$i<$count-1;$i++){
                    $num_after .= '0';
                }
                
                $num_after .= '1';
                    
                $count = $n - $count;
                
                for($i=0;$i<$count;$i++){
                    $num_after .= '0';
                }
                
                $return = $num_after;
            } 
        
    return $return;
    }

    function after($num_befor,$base,$n){
        //узнаем размер базы
        $count = count($base);
        
        //идем до ее конца
        for($i=0;$i<$count;$i++){
            
            //уздаем размер очередного элемента базы
            $len = strlen($base[$i]);
            
            //создаем новое число
            $num_after = substr_replace($num_befor,$base[$i], -$len);
            
            //если новое число больше предыдущего и прошло проверку "тест", значит выдаем это число
            if($num_after > $num_befor and $this->test($num_after)) return $num_after; 
        }
        
    return false;
    }

    function test($num){
        //узнаем размер нового числа
        $len = strlen($num);
        
        //проверяем наличие рядом стоящих единиц
        for($i=0;$i<$len;$i++)
            if($num[$i] == 1 and $num[$i] == $num[$i-1]) return false;
            
    return true;
    }
}

//объявляем класс
$g = new GEN();

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////




////////////////////////////////////////////////////////////////////////////////
/*------------------------------------Вариант #2------------------------------*/
////////////////////////////////////////////////////////////////////////////////

function main($n){
$work = [];
     //Сначала мы должны привести данные в тот вид, в котором с ним работает вся функция
    for($i=0;$i<$n; $i++) $text .= 'x';
    array_push($work,$text);
    
    //логика этого метода следующая:
    //Берем очередной элемент из базы, берем -1 символ от счетчика
    //Если это 0, то заносим в базу 2-а новых элемента, где на месте символа(по счетчику)
    //стоит 0 и 1. Т.Е. в базе xxxx1,xxxx0, после выполнения станет xxx01, xxx00, xxx10
    //Далее xx101, xx001, xx100, xx000, xx010. и т.д.
    for($i=$n-1;$i>=0;$i--){
        $count = count($work);
        
        for($j=0;$j<$count;$j++){
            $time = array_shift($work);
            
            if($time[$i+1] == null or $time[$i+1] == '0'){
                $time[$i] = '0';
                array_push($work,$time);
                
                $time[$i] = '1';
                array_push($work,$time);
            }elseif($time[$i+1] == '1'){
                
                $time[$i] = '0';
                
                array_push($work,$time);
            }
    
        }
    }
return $work;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////



/*---Вывод варианта 1---*/
print_r($g->main($n));

/*---Вывод варианта 2---*/
print_r(main($n));

?>